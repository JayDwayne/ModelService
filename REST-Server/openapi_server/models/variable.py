# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Variable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, standard_name=None, standard_name_ontology=None, units=None, metadata=None):  # noqa: E501
        """Variable - a model defined in OpenAPI

        :param name: The name of this Variable.  # noqa: E501
        :type name: str
        :param standard_name: The standard_name of this Variable.  # noqa: E501
        :type standard_name: str
        :param standard_name_ontology: The standard_name_ontology of this Variable.  # noqa: E501
        :type standard_name_ontology: str
        :param units: The units of this Variable.  # noqa: E501
        :type units: str
        :param metadata: The metadata of this Variable.  # noqa: E501
        :type metadata: object
        """
        self.openapi_types = {
            'name': str,
            'standard_name': str,
            'standard_name_ontology': str,
            'units': str,
            'metadata': object
        }

        self.attribute_map = {
            'name': 'name',
            'standard_name': 'standard_name',
            'standard_name_ontology': 'standard_name_ontology',
            'units': 'units',
            'metadata': 'metadata'
        }

        self._name = name
        self._standard_name = standard_name
        self._standard_name_ontology = standard_name_ontology
        self._units = units
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'Variable':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Variable of this Variable.  # noqa: E501
        :rtype: Variable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Variable.


        :return: The name of this Variable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Variable.


        :param name: The name of this Variable.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def standard_name(self):
        """Gets the standard_name of this Variable.


        :return: The standard_name of this Variable.
        :rtype: str
        """
        return self._standard_name

    @standard_name.setter
    def standard_name(self, standard_name):
        """Sets the standard_name of this Variable.


        :param standard_name: The standard_name of this Variable.
        :type standard_name: str
        """
        if standard_name is None:
            raise ValueError("Invalid value for `standard_name`, must not be `None`")  # noqa: E501

        self._standard_name = standard_name

    @property
    def standard_name_ontology(self):
        """Gets the standard_name_ontology of this Variable.


        :return: The standard_name_ontology of this Variable.
        :rtype: str
        """
        return self._standard_name_ontology

    @standard_name_ontology.setter
    def standard_name_ontology(self, standard_name_ontology):
        """Sets the standard_name_ontology of this Variable.


        :param standard_name_ontology: The standard_name_ontology of this Variable.
        :type standard_name_ontology: str
        """

        self._standard_name_ontology = standard_name_ontology

    @property
    def units(self):
        """Gets the units of this Variable.


        :return: The units of this Variable.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Variable.


        :param units: The units of this Variable.
        :type units: str
        """

        self._units = units

    @property
    def metadata(self):
        """Gets the metadata of this Variable.


        :return: The metadata of this Variable.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Variable.


        :param metadata: The metadata of this Variable.
        :type metadata: object
        """

        self._metadata = metadata
