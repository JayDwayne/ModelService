# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Parameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, description=None, label=None, data_type=None, default_value=None, standard_name=None):  # noqa: E501
        """Parameter - a model defined in OpenAPI

        :param id: The id of this Parameter.  # noqa: E501
        :type id: str
        :param description: The description of this Parameter.  # noqa: E501
        :type description: str
        :param label: The label of this Parameter.  # noqa: E501
        :type label: str
        :param data_type: The data_type of this Parameter.  # noqa: E501
        :type data_type: str
        :param default_value: The default_value of this Parameter.  # noqa: E501
        :type default_value: object
        :param standard_name: The standard_name of this Parameter.  # noqa: E501
        :type standard_name: List[StandardName]
        """
        self.openapi_types = {
            'id': str,
            'description': str,
            'label': str,
            'data_type': str,
            'default_value': object,
            'standard_name': List[StandardName]
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'label': 'label',
            'data_type': 'data_type',
            'default_value': 'default_value',
            'standard_name': 'standard_name'
        }

        self._id = id
        self._description = description
        self._label = label
        self._data_type = data_type
        self._default_value = default_value
        self._standard_name = standard_name

    @classmethod
    def from_dict(cls, dikt) -> 'Parameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parameter of this Parameter.  # noqa: E501
        :rtype: Parameter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Parameter.

        Identifier associated with parameter in MINT  # noqa: E501

        :return: The id of this Parameter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Parameter.

        Identifier associated with parameter in MINT  # noqa: E501

        :param id: The id of this Parameter.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this Parameter.

        Natural language description of parameter  # noqa: E501

        :return: The description of this Parameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Parameter.

        Natural language description of parameter  # noqa: E501

        :param description: The description of this Parameter.
        :type description: str
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this Parameter.

        The name of the parameter, which should be used as a `key` within a `config` sent to the `run_model` endpoint.  # noqa: E501

        :return: The label of this Parameter.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Parameter.

        The name of the parameter, which should be used as a `key` within a `config` sent to the `run_model` endpoint.  # noqa: E501

        :param label: The label of this Parameter.
        :type label: str
        """

        self._label = label

    @property
    def data_type(self):
        """Gets the data_type of this Parameter.

        The parameter's data type  # noqa: E501

        :return: The data_type of this Parameter.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Parameter.

        The parameter's data type  # noqa: E501

        :param data_type: The data_type of this Parameter.
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def default_value(self):
        """Gets the default_value of this Parameter.

        The parameter's default value. Type depends on the parameter's data_type  # noqa: E501

        :return: The default_value of this Parameter.
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this Parameter.

        The parameter's default value. Type depends on the parameter's data_type  # noqa: E501

        :param default_value: The default_value of this Parameter.
        :type default_value: object
        """

        self._default_value = default_value

    @property
    def standard_name(self):
        """Gets the standard_name of this Parameter.


        :return: The standard_name of this Parameter.
        :rtype: List[StandardName]
        """
        return self._standard_name

    @standard_name.setter
    def standard_name(self, standard_name):
        """Sets the standard_name of this Parameter.


        :param standard_name: The standard_name of this Parameter.
        :type standard_name: List[StandardName]
        """

        self._standard_name = standard_name
