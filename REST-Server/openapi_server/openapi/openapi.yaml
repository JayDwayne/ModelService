openapi: 3.0.0
info:
  description: This API specification is for the World Modelers Modeling Service System. The goal of this API is to provide a controller for model discovery and exploration, as well as for initializing and managing model runs.
  title: ModelService API
  version: 1.0.0
servers:
- description: Future (production) server
  url: http://modelservice.worldmodelers.com
- description: Local server for testing
  url: http://localhost:8080
paths:
  /list_models:
    post:
      description: Request a list of currently available models.
      operationId: list_models_post
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableModels'
          description: SUCCESS
      summary: Obtain a list of current models
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /model_info/{ModelName}:
    get:
      description: Submit a model name and receive metadata information about the model, such as its purpose, who maintains it, and how it can be run.
      operationId: model_info_model_name_get
      parameters:
      - description: The name of a model.
        explode: false
        in: path
        name: ModelName
        required: true
        schema:
          $ref: '#/components/schemas/ModelName'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: SUCCESS
      summary: Get basic metadata information for a specified model.
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /model_io:
    post:
      description: Submit a model name and receive information about the input or output files required by this model.
      operationId: model_io_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IORequest'
        description: The name of a model and an IO type.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelIO'
          description: SUCCESS
      summary: Obtain information on a given model's inputs or outputs.
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /model_config/{ModelName}:
    get:
      description: Submit a model name and receive all configurations for the given model.
      operationId: model_config_model_name_get
      parameters:
      - description: The name of a model.
        explode: false
        in: path
        name: ModelName
        required: true
        schema:
          $ref: '#/components/schemas/ModelName'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ModelConfig'
                type: array
          description: SUCCESS
      summary: Obtain configurations for a given model.
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /search:
    post:
      description: Search for a model, dataset, or variable based on name or standard name
      operationId: search_post
      requestBody:
        content:
          application/json:
            schema:
              discriminator:
                propertyName: query_type
              oneOf:
              - $ref: '#/components/schemas/GeoQuery'
              - $ref: '#/components/schemas/TimeQuery'
              - $ref: '#/components/schemas/TextQuery'
        description: Search parameters
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
          description: SUCCESS
      summary: Search for a model, dataset, or variable
      tags:
      - exploration
      x-openapi-router-controller: openapi_server.controllers.exploration_controller
  /run_model:
    post:
      description: Submit a configuration to run a specific model. Model is run asynchronously. Results are available through `/run_results` endpoint.
      operationId: run_model_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelConfig'
        description: Model and configuration parameters
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunID'
          description: SUCCESS
      summary: Run a model for a given a configuration
      tags:
      - execution
      x-openapi-router-controller: openapi_server.controllers.execution_controller
  /run_status/{RunID}:
    get:
      description: Submit a `RunID` and receive the model run status
      operationId: run_status_run_idget
      parameters:
      - description: The `ID` for a given model run.
        explode: false
        in: path
        name: RunID
        required: true
        schema:
          $ref: '#/components/schemas/RunID'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStatus'
          description: SUCCESS
      summary: Obtain status for a given model run
      tags:
      - execution
      x-openapi-router-controller: openapi_server.controllers.execution_controller
  /run_results/{RunID}:
    get:
      description: Submit a `RunID` and receive model run results metadata, including whether it succeeded or failed and where to access the result data.
      operationId: run_results_run_idget
      parameters:
      - description: The ID for a given model run.
        explode: false
        in: path
        name: RunID
        required: true
        schema:
          $ref: '#/components/schemas/RunID'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunResults'
          description: SUCCESS
      summary: Obtain metadata about the results of a given model run
      tags:
      - execution
      x-openapi-router-controller: openapi_server.controllers.execution_controller
  /list_runs/{ModelName}:
    get:
      description: Submit a `ModelName` and receive an array of `RunID`s associated with the given model.
      operationId: list_runs_model_name_get
      parameters:
      - description: A model name
        explode: false
        in: path
        name: ModelName
        required: true
        schema:
          $ref: '#/components/schemas/ModelName'
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RunID'
                type: array
          description: SUCCESS
      summary: Obtain a list of runs for a given model
      tags:
      - execution
      x-openapi-router-controller: openapi_server.controllers.execution_controller
components:
  schemas:
    ModelName:
      description: A model's name
      example: DSSAT
      type: string
    Model:
      description: An object defining high-level metadata about a model
      example:
        versions:
        - "1.1"
        - "1.2"
        - LATEST
        name: DSSAT
        description: The Decision Support System for Agrotechnology Transfer (DSSAT) is a software application program that comprises crop simulation models for over 42 crops (as of Version 4.7) as well as tools to facilitate effective use of the models. The tools include database management programs for soil, weather, crop management and experimental data, utilities and application programs. The crop simulation models simulate growth, development and yield as a function of the soil-plant-atmosphere dynamics.
        category:
        - Agriculture
        - Economic
        maintainer: Cheryl Porter, University of Florida, cporter@ufl.edu
      properties:
        name:
          description: A model's name
          example: DSSAT
          type: string
        versions:
          description: Latest model version
          example:
          - "1.1"
          - "1.2"
          - LATEST
          items:
            type: string
          type: array
        maintainer:
          description: Maintainer information for this model. Should include institution name and point of contact.
          example: Cheryl Porter, University of Florida, cporter@ufl.edu
          type: string
        description:
          description: A basic overview of the model's purpose.
          example: The Decision Support System for Agrotechnology Transfer (DSSAT) is a software application program that comprises crop simulation models for over 42 crops (as of Version 4.7) as well as tools to facilitate effective use of the models. The tools include database management programs for soil, weather, crop management and experimental data, utilities and application programs. The crop simulation models simulate growth, development and yield as a function of the soil-plant-atmosphere dynamics.
          type: string
        category:
          description: The category for the given model.
          example:
          - Agriculture
          - Economic
          items:
            type: string
          type: array
      required:
      - description
      - maintainer
      - name
      type: object
    AvailableModels:
      description: An array of available models
      example:
      - DSSAT
      - PIHM
      - TopoFlow
      - Cycles
      - ClimComp
      items:
        $ref: '#/components/schemas/ModelName'
      type: array
      uniqueItems: true
    ModelIO:
      description: Array of input or output files for the given model.
      items:
        $ref: '#/components/schemas/IOFile'
      type: array
    IOFile:
      description: An object that defines a single input or output file for a model
      example:
        filetype: WTH
        variables:
        - metadata: '{}'
          name: name
          standard_name_ontology: standard_name_ontology
          standard_name: standard_name
          units: units
        - metadata: '{}'
          name: name
          standard_name_ontology: standard_name_ontology
          standard_name: standard_name
          units: units
        name: NASA-POWER Weather Data
        description: Weather data from the NASA-POWER database. This database provides historical global weather data, including a minimum dataset of DSSAT, on 1-degree grids in ICASA Standards format.
      properties:
        name:
          description: The name of a given input or output file. This should be general and should not reference a specific file.
          example: NASA-POWER Weather Data
          type: string
        description:
          description: Description of the file.
          example: Weather data from the NASA-POWER database. This database provides historical global weather data, including a minimum dataset of DSSAT, on 1-degree grids in ICASA Standards format.
          type: string
        filetype:
          description: The file type (extension) for this file
          example: WTH
          type: string
        variables:
          description: An array of variables associated with a given input or output file
          items:
            $ref: '#/components/schemas/Variable'
          type: array
      required:
      - description
      - filetype
      - name
      type: object
    IORequest:
      description: A request object indicating whether the response should return either input or output files and for which model
      example:
        name: DSSAT
        iotype: input
      properties:
        name:
          description: A model's name
          example: DSSAT
          type: string
        iotype:
          enum:
          - input
          - output
          type: string
      type: object
    ModelConfig:
      description: A model configuration file (JSON).
      example:
        name: DSSAT
        config: '{}'
      properties:
        name:
          description: A model's name
          example: DSSAT
          type: string
        config:
          type: object
      required:
      - config
      - name
      type: object
    Variable:
      description: A variable used in a model input or output file.
      example:
        metadata: '{}'
        name: name
        standard_name_ontology: standard_name_ontology
        standard_name: standard_name
        units: units
      properties:
        name:
          type: string
        standard_name:
          type: string
        standard_name_ontology:
          type: string
        units:
          type: string
        metadata:
          type: object
      required:
      - name
      - standard_name
      type: object
    SearchResult:
      description: The result of a search
      type: object
    Query:
      discriminator:
        propertyName: query_type
      properties:
        query_type:
          description: Is this a geo, time or text query?
          enum:
          - geo
          - time
          - text
          type: string
        result_type:
          description: Should the query return models, datasets, or variables?
          enum:
          - models
          - datasets
          - variables
          type: string
      required:
      - query_type
      - result_type
      type: object
    GeoQuery:
      allOf:
      - $ref: '#/components/schemas/Query'
      - description: 'A geospatial bounding box search parameter is 4-elements in
          the WGS84 coordinate system: [xmin, ymin, xmax, ymax]. x is longitude, y
          is latitude'
        properties:
          xmin:
            description: Minimum longitude
            type: number
          xmax:
            description: Maximum longitude
            type: number
          ymin:
            description: Minimum latitude
            type: number
          ymax:
            description: Maximum latitude
            type: number
        required:
        - result_type
        - xmax
        - xmin
        - ymax
        - ymin
        type: object
    TimeQuery:
      allOf:
      - $ref: '#/components/schemas/Query'
      - description: A query defined by a start and end time.
        properties:
          start_time:
            description: Minimum time for search query.
            type: string
          end_time:
            description: Maximum time for search query
            type: string
        required:
        - end_time
        - start_time
        type: object
    TextQuery:
      allOf:
      - $ref: '#/components/schemas/Query'
      - description: A text string based query.
        properties:
          type:
            description: The type of query (either keyword or standard name)
            enum:
            - keyword
            - standard name
            type: string
          term:
            description: The search term of interest.
            type: string
        required:
        - term
        - type
        type: object
    RunID:
      description: ID associated with a model run. This is the SHA256 hash of the ModelConfig sent to the /run_model endpoint
      example: 3A3B3E0AE57AD4A7EF658C1F7832774F55E403F01FDF44B68B355EC4587D7A04
      type: string
    RunStatus:
      description: Status information about a model run.
      enum:
      - PENDING
      - FAIL
      - SUCCESS
      type: string
    RunResults:
      description: Metadata about the results of a given model run.
      example:
        output: output
        config:
          name: DSSAT
          config: '{}'
        status: SUCCESS
      properties:
        config:
          $ref: '#/components/schemas/ModelConfig'
        status:
          enum:
          - SUCCESS
          - FAIL
          - PENDING
          type: string
        output:
          description: URI for accessing output (for example, on S3)
          type: string
      type: object